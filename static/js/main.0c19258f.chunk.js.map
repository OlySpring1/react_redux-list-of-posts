{"version":3,"sources":["components/Loading/Loading.tsx","components/User/User.tsx","helpers/capitalize.ts","components/Comments/Comments.tsx","components/CommentList/CommentList.tsx","components/PostItem/PostItem.tsx","components/PostList/PostList.tsx","components/Button/Button.tsx","store/loading.ts","store/message.ts","store/loadedComleted.ts","store/posts.ts","store/search.ts","helpers/api.ts","store/index.ts","App.tsx","index.tsx"],"names":["Loading","isLoaded","errorMessage","className","User","name","email","address","href","city","street","zipcode","capitalize","str","toUpperCase","slice","Comments","body","CommentList","comments","map","comment","key","id","PostItem","title","user","PostList","posts","post","Button","handleOnClick","text","type","onClick","reducer","loading","action","message","query","API_URL","getData","url","a","fetch","response","json","getPreparedPosts","Promise","all","users","preparedPosts","find","userId","filter","postId","rootReducer","combineReducers","loadingReducer","loaded","isLoadReducer","messageReducer","queryReducer","getLoading","state","getMessage","getPosts","getLoaded","getQuery","getVisiblePosts","toLowerCase","includes","loadPosts","dispatch","then","postsFromServer","catch","setMessage","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","useDispatch","isLoading","useSelector","visiblePosts","length","htmlFor","value","onChange","e","target","setQuery","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c19258f.chunk.js","sourcesContent":["import React from 'react';\nimport './Loading.css';\n\ntype Props = {\n  isLoaded: boolean;\n  errorMessage: string;\n};\n\nconst Loading: React.FC<Props> = ({ isLoaded, errorMessage }) => (\n  <div className={(isLoaded || errorMessage !== '') ? '' : 'lds-roller'}>\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport './User.css';\n\ntype Props = {\n  name: string;\n  email: string;\n  address: Address;\n};\n\nconst User: React.FC<Props> = ({ name, email, address }) => (\n  <>\n    <div className=\"author\">\n      <p>\n        {' '}\n        <span className=\"author__title\">Author: </span>\n        {name}\n      </p>\n      <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n      <p className=\"author__address\">\n        <span>\n          {address.city}\n          ,\n        </span>\n        <span>\n          {address.street}\n          ,\n        </span>\n        <span>{address.zipcode}</span>\n      </p>\n    </div>\n  </>\n);\n\nexport default User;\n","export const capitalize = (str: string) => (\n  str[0].toUpperCase() + str.slice(1)\n);\n","import React from 'react';\nimport './Comments.css';\nimport { capitalize } from '../../helpers/capitalize';\n\ntype Props = {\n  name: string;\n  email: string;\n  body: string;\n};\n\nconst Comments: React.FC<Props> = ({ name, email, body }) => (\n  <div className=\"comments__item\">\n    <p className=\"author\">\n      {capitalize(name)}\n      <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n    </p>\n    <p>\n      {capitalize(body)}\n    </p>\n  </div>\n);\n\nexport default Comments;\n","import React from 'react';\nimport Comment from '../Comments/Comments';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <div className=\"comments\">\n    <h2>Comments</h2>\n    {comments.map(comment => (\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport './PostItem.css';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\nimport { capitalize } from '../../helpers/capitalize';\n\ntype Props = {\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n};\n\nconst PostItem: React.FC<Props> = ({\n  title, body, user, comments,\n}) => (\n  <section className=\"post\">\n\n    <h2 className=\"post__title\">\n      {capitalize(title)}\n    </h2>\n\n    <User {...user} />\n\n    <article className=\"post__text\">\n      {capitalize(body)}\n    </article>\n\n    <CommentList comments={comments} />\n  </section>\n\n);\n\nexport default PostItem;\n","import React from 'react';\nimport './PostList.css';\nimport PostItem from '../PostItem/PostItem';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <div className=\"container\">\n    {posts.map((post: PreparedPost) => (\n      <PostItem {...post} key={post.id} />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import React from 'react';\nimport './Button.css';\n\ntype Props = {\n  handleOnClick: () => void;\n  text: string;\n};\n\nconst Button: React.FC<Props> = ({ handleOnClick, text }) => (\n  <button\n    type=\"button\"\n    className=\"button\"\n    onClick={handleOnClick}\n  >\n    {text}\n  </button>\n);\n\nexport default Button;\n","import { AnyAction } from 'redux';\n\n// Action types\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n\n// Action creators\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n// export const handleError = () => ({ type: HANDLE_ERROR });\n\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst LOAD_COMPLETED = 'LOAD_COMPLETED';\n\n\n// Action creators\nexport const setIsLoaded = () => ({ type: LOAD_COMPLETED });\n\nconst reducer = (isLoaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_COMPLETED:\n      return true;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_POSTS = 'SET_POSTS';\n\n// Action creators\nexport const handleSuccess = (posts: PreparedPost[]) => (\n  {\n    type: SET_POSTS,\n    posts,\n  }\n);\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst QUERY = 'QUERY';\n\n// Action creators\nexport const setQuery = (query: string) => (\n  {\n    type: QUERY,\n    query,\n  }\n);\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case QUERY:\n      return action.query;\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nasync function getData(url: string) {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n}\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const [posts, users, comments] = await Promise.all([\n    getData(`${API_URL}/posts.json`),\n    getData(`${API_URL}/users.json`),\n    getData(`${API_URL}/comments.json`),\n  ]);\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n\n\nexport function fetchMessage(): Promise<string> {\n  // this is just a fake promise resolved in 2 seconds\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","import {\n  createStore, combineReducers, applyMiddleware, AnyAction,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport isLoadReducer, { setIsLoaded } from './loadedComleted';\nimport posts, { handleSuccess } from './posts';\nimport queryReducer from './search';\nimport { getPreparedPosts } from '../helpers/api';\n// import { fetchMessage } from '../helpers/api';\n\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  loaded: isLoadReducer,\n  message: messageReducer,\n  posts,\n  query: queryReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getLoaded = (state: RootState) => state.loaded;\nexport const getQuery = (state: RootState) => state.query;\n\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts\n    .filter((post: PreparedPost) => (\n      (post.title + post.body)\n        .toLowerCase()\n        .includes(state.query.toLowerCase())\n    ));\n};\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\n\nexport const loadPosts = () => {\n  return (dispatch: Dispatch<AnyAction>) => {\n    dispatch(startLoading());\n\n    getPreparedPosts()\n      .then(postsFromServer => {\n        dispatch(finishLoading());\n        dispatch(handleSuccess(postsFromServer));\n        dispatch(setIsLoaded());\n      })\n      .catch(() => {\n        dispatch(setMessage('Oops! Something went wrong... :('));\n      });\n  };\n};\n\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport Loading from './components/Loading/Loading';\nimport PostList from './components/PostList/PostList';\nimport Button from './components/Button/Button';\nimport {\n  loadPosts, getLoaded, getVisiblePosts, getLoading, getMessage, getPosts, getQuery,\n} from './store/index';\n\nimport { setQuery } from './store/search';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n  const errorMessage = useSelector(getMessage) || '';\n  const posts = useSelector(getPosts) || [];\n  const isLoaded = useSelector(getLoaded);\n  const query = useSelector(getQuery);\n  const visiblePosts = useSelector(getVisiblePosts);\n\n  const handleOnChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n\n    dispatch(setQuery(value));\n  };\n\n  return (\n    <>\n      <div className=\"container-header\">\n        <h1>Dynamic list of posts</h1>\n\n        {(!isLoading && posts.length === 0) && (\n          <Button\n            handleOnClick={() => dispatch(loadPosts())}\n            text=\"Load\"\n          />\n        )}\n\n        {isLoading && (\n          <Loading\n            isLoaded={isLoaded}\n            errorMessage={errorMessage}\n          />\n        )}\n\n        {isLoaded && (\n          <>\n            <label\n              htmlFor=\"inputFilter\"\n              className=\"label\"\n            >\n              Filter field\n              <input\n                type=\"text\"\n                id=\"inputFilter\"\n                className=\"inputFilter\"\n                value={query}\n                onChange={handleOnChange}\n              />\n            </label>\n            <PostList posts={visiblePosts} />\n          </>\n        )}\n\n        {errorMessage\n          && (\n            <div className=\"is-error\">\n              <p className=\"is-error__text\">\n                {errorMessage}\n              </p>\n              <Button\n                handleOnClick={() => dispatch(loadPosts())}\n                text=\"Try again\"\n              />\n            </div>\n          )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}