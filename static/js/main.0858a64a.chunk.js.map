{"version":3,"sources":["components/Loading/Loading.tsx","components/User/User.tsx","helpers/capitalize.ts","store/posts.ts","components/Comments/Comments.tsx","components/CommentList/CommentList.tsx","components/PostItem/PostItem.tsx","components/PostList/PostList.tsx","components/Button/Button.tsx","store/loading.ts","store/message.ts","store/loadedComleted.ts","store/search.ts","helpers/api.ts","store/index.ts","App.tsx","index.tsx"],"names":["Loading","isLoaded","errorMessage","className","User","name","email","address","href","city","street","zipcode","capitalize","str","toUpperCase","slice","reducer","posts","action","type","filter","post","id","postId","map","comments","comment","commentId","Comments","body","dispatch","useDispatch","onClick","removeComment","CommentList","key","PostItem","title","user","PostList","Button","handleOnClick","text","loading","message","query","API_URL","getData","url","a","fetch","response","json","getPreparedPosts","Promise","all","users","preparedPosts","find","userId","rootReducer","combineReducers","loadingReducer","loaded","isLoadReducer","messageReducer","queryReducer","getLoading","state","getMessage","getPosts","getLoaded","getQuery","getVisiblePosts","toLowerCase","includes","loadPosts","then","postsFromServer","catch","setMessage","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","isLoading","useSelector","visiblePosts","useState","visibleQuery","setVisibleQuery","setVisibleQueryWithDebounce","useCallback","debounce","actualQuery","setQuery","length","htmlFor","value","onChange","e","target","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0858a64a.chunk.js","sourcesContent":["import React from 'react';\nimport './Loading.css';\n\ntype Props = {\n  isLoaded: boolean;\n  errorMessage: string;\n};\n\nconst Loading: React.FC<Props> = ({ isLoaded, errorMessage }) => (\n  <div className={(isLoaded || errorMessage !== '') ? '' : 'lds-roller'}>\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport './User.css';\n\ntype Props = {\n  name: string;\n  email: string;\n  address: Address;\n};\n\nconst User: React.FC<Props> = ({ name, email, address }) => (\n  <>\n    <div className=\"author\">\n      <p>\n        {' '}\n        <span className=\"author__title\">Author: </span>\n        {name}\n      </p>\n      <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n      <p className=\"author__address\">\n        <span>\n          {address.city}\n          ,\n        </span>\n        <span>\n          {address.street}\n          ,\n        </span>\n        <span>{address.zipcode}</span>\n      </p>\n    </div>\n  </>\n);\n\nexport default User;\n","export const capitalize = (str: string) => (\n  str[0].toUpperCase() + str.slice(1)\n);\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_POSTS = 'SET_POSTS';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\n// Action creators\nexport const setPosts = (posts: Post[]) => (\n  {\n    type: SET_POSTS,\n    posts,\n  }\n);\n\nexport const removePost = (postId: number) => (\n  {\n    type: REMOVE_POST,\n    postId,\n  }\n);\n\nexport const removeComment = (postId: number, commentId: number) => (\n  {\n    type: REMOVE_COMMENT,\n    postId,\n    commentId,\n  }\n);\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (posts: PreparedPost[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case REMOVE_POST:\n      return posts.filter(post => post.id !== action.postId);\n    case REMOVE_COMMENT:\n      return posts.map(post => {\n        if (post.id === action.postId) {\n          return {\n            ...post,\n            comments: post.comments\n              .filter((comment: Comment) => comment.id !== action.commentId),\n          };\n        }\n\n        return post;\n      });\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport './Comments.css';\nimport { useDispatch } from 'react-redux';\nimport { capitalize } from '../../helpers/capitalize';\nimport { removeComment } from '../../store/posts';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comments: React.FC<Props> = ({ comment }) => {\n  const {\n    id, name, email, body, postId,\n  } = comment;\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"comments__item\">\n      <button\n        type=\"button\"\n        onClick={() => dispatch(removeComment(postId, id))}\n      >\n        X\n      </button>\n\n      <p className=\"author\">\n        {capitalize(name)}\n        <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n      </p>\n      <p>\n        {capitalize(body)}\n      </p>\n    </div>\n  );\n};\n\nexport default Comments;\n","import React from 'react';\nimport Comment from '../Comments/Comments';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <div className=\"comments\">\n    <h2>Comments</h2>\n    {comments.map(comment => (\n      <Comment\n        comment={comment}\n        key={comment.id}\n      />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport './PostItem.css';\nimport { useDispatch } from 'react-redux';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\nimport { capitalize } from '../../helpers/capitalize';\nimport { removePost } from '../../store/posts';\n\ntype Props = {\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n};\n\nconst PostItem: React.FC<Props> = ({\n  title, body, user, comments, id,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <section className=\"post\">\n\n      <h2 className=\"post__title\">\n        {capitalize(title)}\n      </h2>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(removePost(id))}\n      >\n        X\n      </button>\n\n      <User {...user} />\n\n      <article className=\"post__text\">\n        {capitalize(body)}\n      </article>\n\n      <CommentList comments={comments} />\n    </section>\n\n  );\n};\n\n\nexport default PostItem;\n","import React from 'react';\nimport './PostList.css';\nimport PostItem from '../PostItem/PostItem';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <div className=\"container\">\n    {posts.map((post: PreparedPost) => (\n      <PostItem {...post} key={post.id} />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import React from 'react';\nimport './Button.css';\n\ntype Props = {\n  handleOnClick: () => void;\n  text: string;\n};\n\nconst Button: React.FC<Props> = ({ handleOnClick, text }) => (\n  <button\n    type=\"button\"\n    className=\"button\"\n    onClick={handleOnClick}\n  >\n    {text}\n  </button>\n);\n\nexport default Button;\n","import { AnyAction } from 'redux';\n\n// Action types\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n\n// Action creators\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst LOAD_COMPLETED = 'LOAD_COMPLETED';\n\n\n// Action creators\nexport const setIsLoaded = () => ({ type: LOAD_COMPLETED });\n\nconst reducer = (isLoaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_COMPLETED:\n      return true;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst QUERY = 'QUERY';\n\n// Action creators\nexport const setQuery = (query: string) => (\n  {\n    type: QUERY,\n    query,\n  }\n);\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case QUERY:\n      return action.query;\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nasync function getData(url: string) {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n}\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const [posts, users, comments] = await Promise.all([\n    getData(`${API_URL}/posts.json`),\n    getData(`${API_URL}/users.json`),\n    getData(`${API_URL}/comments.json`),\n  ]);\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n\n\nexport function fetchMessage(): Promise<string> {\n  // this is just a fake promise resolved in 2 seconds\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","import {\n  createStore, combineReducers, applyMiddleware, AnyAction,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport isLoadReducer, { setIsLoaded } from './loadedComleted';\nimport posts, { setPosts } from './posts';\nimport queryReducer from './search';\nimport { getPreparedPosts } from '../helpers/api';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  loaded: isLoadReducer,\n  message: messageReducer,\n  posts,\n  query: queryReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getLoaded = (state: RootState) => state.loaded;\nexport const getQuery = (state: RootState) => state.query;\n\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts\n    .filter((post: PreparedPost) => (\n      (post.title + post.body)\n        .toLowerCase()\n        .includes(state.query.toLowerCase())\n    ));\n};\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\n\nexport const loadPosts = () => {\n  return (dispatch: Dispatch<AnyAction>) => {\n    dispatch(startLoading());\n\n    getPreparedPosts()\n      .then(postsFromServer => {\n        dispatch(finishLoading());\n        dispatch(setPosts(postsFromServer));\n        dispatch(setIsLoaded());\n      })\n      .catch(() => {\n        dispatch(setMessage('Oops! Something went wrong... :('));\n      });\n  };\n};\n\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport debounce from 'lodash.debounce';\nimport Loading from './components/Loading/Loading';\nimport PostList from './components/PostList/PostList';\nimport Button from './components/Button/Button';\nimport {\n  loadPosts, getLoaded, getVisiblePosts,\n  getLoading, getMessage, getPosts, getQuery,\n}\n  from './store/index';\n\nimport { setQuery } from './store/search';\n// import { useHistory, useLocation } from 'react-router-dom';\n// import {debounce} from './helpers/debounce';\nconst App: React.FC = () => {\n  // const history = useHistory();\n  // const location = useLocation();\n  // const searchParams = new URLSearchParams(location.search);\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n  const errorMessage = useSelector(getMessage);\n  const posts = useSelector(getPosts);\n  const isLoaded = useSelector(getLoaded);\n  const query = useSelector(getQuery);\n  const visiblePosts = useSelector(getVisiblePosts);\n  const [visibleQuery, setVisibleQuery] = useState(query);\n\n  const setVisibleQueryWithDebounce = useCallback(\n    debounce((actualQuery: string) => dispatch(setQuery(actualQuery)), 500), [],\n  );\n\n  const handleOnChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n\n    setVisibleQuery(value);\n    setVisibleQueryWithDebounce(value);\n  };\n\n  return (\n    <>\n      <div className=\"container-header\">\n        <h1>Dynamic list of posts</h1>\n\n        {(!isLoading && posts.length === 0) && (\n          <Button\n            handleOnClick={() => dispatch(loadPosts())}\n            text=\"Load\"\n          />\n        )}\n\n        {isLoading && (\n          <Loading\n            isLoaded={isLoaded}\n            errorMessage={errorMessage}\n          />\n        )}\n\n        {isLoaded && (\n          <>\n            <label\n              htmlFor=\"inputFilter\"\n              className=\"label\"\n            >\n              Filter field\n              <input\n                type=\"text\"\n                id=\"inputFilter\"\n                className=\"inputFilter\"\n                value={visibleQuery}\n                onChange={handleOnChange}\n              />\n            </label>\n            <PostList posts={visiblePosts} />\n          </>\n        )}\n\n        {errorMessage\n          && (\n            <div className=\"is-error\">\n              <p className=\"is-error__text\">\n                {errorMessage}\n              </p>\n              <Button\n                handleOnClick={() => dispatch(loadPosts())}\n                text=\"Try again\"\n              />\n            </div>\n          )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}